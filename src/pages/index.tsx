import Head from "next/head";
import { useEffect, useState } from "react";
import Icon from "@mdi/react";
import { mdiPencil } from "@mdi/js";
//import { useRouter } from "next/router";
import { CustomerDataSchema } from "../lib/form-schema";
import UpDown from "@/component/up-down";
import Link from "next/link";

type QueryFilter = {
  [key: string]: string | number;
};

type QuerySort = {
  sort: QueryFilter;
};

export default function Home() {
  //const router = useRouter();
  const [dataCostumer, setDataCostumer] = useState<Array<CustomerDataSchema>>(
    []
  );

  const [sort, setSort] = useState({
    name: "firstName",
    asc: true,
  });

  const calldata = async () => {
    let query: QuerySort = {
      sort: {},
    };
    query.sort[sort.name] = sort.asc ? 1 : -1;
    if (sort.name == "firstName") {
      query.sort.firstName = sort.asc ? 1 : -1;
      query.sort.lastName = sort.asc ? 1 : -1;
    }

    try {
      const res = await fetch("/api/customers/retrieve", {
        body: JSON.stringify(query),
        headers: {
          "Content-Type": "application/json",
        },
        method: "POST",
      });

      //console.log(res)
      const data = await res.json();
      if (data.result == 200) {
        //console.log('data.data ', data.data)
        setDataCostumer(data.data);
      }
    } catch (err) {
      //throw new Error("Failed to fetch data");
      console.error(err);
    }
  };

  useEffect(() => {
    calldata();
  }, []);

  useEffect(() => {
    calldata();
  }, [sort]);

  const clickHeader = (name: string) => {
    if (sort.name == name) {
      setSort((prevState) => ({
        ...prevState,
        asc: !prevState.asc,
      }));
    } else {
      setSort((prevState) => ({
        ...prevState,
        name: name,
      }));
    }
  };

  return (
    <>
      <Head>
        <title>Data Pelanggan</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="p-12 flex flex-col">
        <div className="flex flex-row justify-between text-sm mb-2">
          <div className="font-bold">Customers</div>
          <Link className="cursor-pointer hover:text-blue-500" href="/add/new">
            Add New Customer
          </Link>
        </div>
        <table data-table="table" className="w-full">
          <thead>
            <tr className="bg-gray-50">
              <th className="border w-1/4">
                <div
                  onClick={() => clickHeader("firstName")}
                  className="flex flex-row justify-between hover:bg-gray-100 cursor-pointer"
                >
                  <div className="text-sm flex flex-row justify-center w-full items-center p-2">
                    Name
                  </div>
                  <UpDown name="firstName" sort={sort} />
                </div>
              </th>
              <th className="border w-1/6">
                <div
                  onClick={() => clickHeader("gender")}
                  className="flex flex-row justify-between hover:bg-gray-100 cursor-pointer"
                >
                  <div className="text-sm flex flex-row justify-center items-center w-full p-2">
                    Gender
                  </div>
                  <UpDown name="gender" sort={sort} />
                </div>
              </th>
              <th className="border w-1/2">
                <div
                  onClick={() => clickHeader("address")}
                  className="flex flex-row justify-between hover:bg-gray-100 cursor-pointer"
                >
                  <div className="text-sm flex flex-row justify-center w-full items-center p-2">
                    Address
                  </div>
                  <UpDown name="address" sort={sort} />
                </div>
              </th>
              <th className="border"></th>
            </tr>
          </thead>

          <tbody>
            {dataCostumer.map((data, index) => {
              return (
                <tr key={index} className="border text-sm">
                  <td className="border-r">
                    <div className="p-1">
                      {data.firstName + " " + data.lastName}
                    </div>
                  </td>
                  <td className="border-r">
                    <div className="p-1">{data.gender}</div>
                  </td>
                  <td className="border-r">
                    <div className="p-1">
                      {data.address &&
                        data.address.map((adr, idxx) => {
                          return (
                            <div
                              className="text-sm"
                              key={idxx}
                            >{`${adr.street} ${adr.house} ${adr.city} ${adr.country}`}</div>
                          );
                        })}
                    </div>
                  </td>
                  <td>
                    <Link
                      className="flex justify-center cursor-pointer hover:text-blue-500"
                      href={"/add/" + data.id}
                    >
                      <Icon
                        className="text-gray-500 cursor-pointer"
                        path={mdiPencil}
                        title="ASC"
                        size={0.7}
                      />
                    </Link>
                    {/*<div
                      onClick={() => router.push("/add/" + data.id)}
                      className="flex justify-center"
                    >
                      <Icon
                        className="text-gray-500 cursor-pointer"
                        path={mdiPencil}
                        title="ASC"
                        size={0.7}
                      />
                      </div>*/}
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </>
  );
}
